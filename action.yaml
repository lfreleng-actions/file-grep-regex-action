---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: 'Extract string from file using GREP'
description: 'Uses grep and a regular expression to extract text from files'

inputs:
  # Mandatory
  regex:
    description: 'Regular expression used to extract string'
    required: true
  filename:
    description: 'File containing text to extract'
    required: true
  # Optional
  flags:
    description: 'Flags to use with grep command'
    required: false
    default: '-E'
  no_fail:
    description: 'Override errors if file not found or no value returned'
    required: false
    default: 'false'

outputs:
  extracted_string:
    description: 'The string extracted by the regular expression'
    value: "${{ steps.grep.outputs.extracted_string }}"

runs:
  using: 'composite'
  steps:
    - name: 'Extract text/string from file'
      id: grep
      shell: bash
      run: |
        # Extract text/string from file

        set -o pipefail

        set -o noglob
        flags="${{ inputs.flags }}"
        regex='${{ inputs.regex }}'
        filename="${{ inputs.filename }}"
        set +o noglob

        if [ ! -f "$filename" ]; then
          echo "Error: file not found [$filename]"
          if [ "f${{ inputs.no_fail }}" = 'ftrue' ]; then
            exit 0
          else
            exit 1
          fi
        fi

        set -o noglob

        echo "Regular expression to use: $regex"
        echo "File to search: $filename"
        if [ -n "$flags" ]; then
          echo "Flags to grep command: $flags"
        fi
        # Extract the string using grep and regex
        string=$(grep $flags '${{ inputs.regex }}' "$filename" || true)
        set +o noglob

        if [ -z "$string" ]; then
          echo 'String extraction failed; no matching value found ❌'
          if [ "f${{ inputs.no_fail }}" = 'ftrue' ]; then
            exit 0
          else
            exit 1
          fi
        else
          # Make multi-line string available as action output
          { echo 'extracted_string<<EOF'
            echo "$string"
            echo EOF
          } >> "$GITHUB_ENV"
          { echo 'extracted_string<<EOF'
            echo "$string"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          echo "Extracted string ✅"
          echo "$string"
        fi
